package pentester.services.impl.loginserviceimpl;

import java.util.Random;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import pentester.models.User;
import pentester.models.UserRole;
import pentester.models.form.LoginForm;
import pentester.services.impl.LoginServiceImpl;

public class LoginServiceImplTest {

	private final String username = "mjdr@mail.com";
	private final String password = "password";
	private PasswordEncoder encoder = new BCryptPasswordEncoder(11);
	private LoginServiceImpl loginService;
	private LoginForm form;
	private TestHttpSession httpSession;
	private long id;

	@Before
	public void setUp() {
		loginService = new LoginServiceImpl();

		User user = new User();

		id = new Random().nextLong();
		user.setEmail(username);
		user.setPasswordHash(encoder.encode(password));
		user.setRole(UserRole.CLIENT);
		user.setId(id);

		loginService.setEncoder(encoder);
		loginService.setUserDAO(new TestUserDAO(username, user));

		httpSession = new TestHttpSession();
		form = new LoginForm();
	}

	@Test
	public void loginTest() {

		form.setLogin(username);
		form.setPassword(password);

		loginService.login(httpSession, form);

		Assert.assertEquals(1, httpSession.getCount());
		Assert.assertEquals(LoginServiceImpl.LOGIN_PARAMETER_NAME, httpSession.getAttributeName());
		Assert.assertEquals(id, ((Long) httpSession.getAttributeValue()).longValue());

	}

	@Test
	public void notLoginTest() {

		form.setLogin(username);
		form.setPassword(password + "1");

		try {
			loginService.login(httpSession, form);
			Assert.fail();
		} catch (Exception e) {
			Assert.assertTrue(e.getMessage(), true);
		}

	}

	@Test
	public void isLogginedTest() {

		form.setLogin(username);
		form.setPassword(password);

		loginService.login(httpSession, form);

		Assert.assertTrue(loginService.isLoggedIn(httpSession));
	}

}
