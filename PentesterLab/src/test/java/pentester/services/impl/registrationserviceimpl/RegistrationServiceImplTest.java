package pentester.services.impl.registrationserviceimpl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.junit.Before;
import org.junit.Test;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import pentester.models.User;
import pentester.models.dao.UserDAO;
import pentester.models.form.RegistrationForm;
import pentester.services.impl.RegistrationServiceImpl;

public class RegistrationServiceImplTest {

	private RegistrationServiceImpl registrationService;
	private PasswordEncoder encoder = new BCryptPasswordEncoder(11);
	private UserDAO userDao;
	private RegistrationForm form;

	@Before
	public void setUp() {
		registrationService = new RegistrationServiceImpl();
		userDao = new RegistrationServiceImplTestUserDAO();

		registrationService.setEncoder(encoder);
		registrationService.setUserDao(userDao);

		form = new RegistrationForm();

	}

	@Test
	public void registr() {

		final String email = "mjdr@yandex.ru";
		final String name = "mjdr";
		final String password = "mjgr@yandex.ru";
		final String confirmPassword = "mjgr@yandex.ru";

		form.setEmail(email);
		form.setName(name);
		form.setPassword(password);
		form.setConfirmPassword(confirmPassword);

		registrationService.register(form);

		User user = userDao.getByEmail(email);

		assertEquals(email, user.getEmail());
		assertEquals(name, user.getName());
		assertTrue(encoder.matches(password, user.getPasswordHash()));

	}

	@Test
	public void emailEmpty() {

		final String email = "";
		final String name = "mjdr";
		final String password = "mjgr@yandex.ru";
		final String confirmPassword = "mjgr@yandex.ru";

		form.setEmail(email);
		form.setName(name);
		form.setPassword(password);
		form.setConfirmPassword(confirmPassword);

		try {
			registrationService.register(form);
			fail();
		} catch (RuntimeException e) {

		}

	}

	@Test
	public void nameEmpty() {

		final String email = "mjdr@yandex.ru";
		final String name = "";
		final String password = "mjgr@yandex.ru";
		final String confirmPassword = "mjgr@yandex.ru";

		form.setEmail(email);
		form.setName(name);
		form.setPassword(password);
		form.setConfirmPassword(confirmPassword);

		try {
			registrationService.register(form);
			fail();
		} catch (RuntimeException e) {

		}

	}

	@Test
	public void passwordEmpty() {

		final String email = "mjdr@yandex.ru";
		final String name = "mjdr";
		final String password = "";
		final String confirmPassword = "mjgr@yandex.ru";

		form.setEmail(email);
		form.setName(name);
		form.setPassword(password);
		form.setConfirmPassword(confirmPassword);

		try {
			registrationService.register(form);
			fail();
		} catch (RuntimeException e) {

		}

	}

	@Test
	public void confirmPasswordEmpty() {

		final String email = "mjdr@yandex.ru";
		final String name = "mjdr";
		final String password = "mjgr@yandex.ru";
		final String confirmPassword = "";

		form.setEmail(email);
		form.setName(name);
		form.setPassword(password);
		form.setConfirmPassword(confirmPassword);

		try {
			registrationService.register(form);
			fail();
		} catch (RuntimeException e) {

		}

	}

	@Test
	public void passwordsDontMatches() {

		final String email = "mjdr@yandex.ru";
		final String name = "mjdr";
		final String password = "mjgr@yandex.ru";
		final String confirmPassword = "mjgr@yandex.ru1234";

		form.setEmail(email);
		form.setName(name);
		form.setPassword(password);
		form.setConfirmPassword(confirmPassword);

		try {
			registrationService.register(form);
			fail();
		} catch (RuntimeException e) {

		}

	}

}
