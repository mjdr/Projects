package pentester.controllers;

import java.util.stream.Collectors;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import pentester.domain.JsonResponse;
import pentester.domain.UserData;
import pentester.models.UserRole;
import pentester.models.form.EditPageForm;
import pentester.models.form.UpdateCSPForm;
import pentester.services.LoginService;
import pentester.services.PageService;
import pentester.services.UserService;

@Controller
@RequestMapping("/admin")
public class AdminController {

	@Autowired
	private LoginService loginService;

	@Autowired
	private UserService userService;

	@Autowired
	private PageService pageService;

	@RequestMapping("/users/list")
	@ResponseBody
	public JsonResponse usersList(HttpSession session) {

		try {
			checkPermissions(session);
			return new JsonResponse("ok",
					userService.getAll().stream().map((user) -> new UserData(user)).collect(Collectors.toList()));
		} catch (RuntimeException e) {
			return new JsonResponse("error", e.getMessage());
		}
	}

	@RequestMapping("/pages/list")
	@ResponseBody
	public JsonResponse pagesList(HttpSession session) {

		try {
			checkPermissions(session);
			return new JsonResponse("ok", pageService.getAllPagesWithoutSource());
		} catch (RuntimeException e) {
			return new JsonResponse("error", e.getMessage());
		}
	}

	@RequestMapping("/page/add")
	@ResponseBody
	public JsonResponse addPage(HttpSession session, @RequestBody EditPageForm form) {

		try {
			checkPermissions(session);
			pageService.addPage(form);
			return new JsonResponse("ok", "");
		} catch (RuntimeException e) {
			return new JsonResponse("error", e.getMessage());
		}
	}

	@RequestMapping("/page/update")
	@ResponseBody
	public JsonResponse pageUpdate(HttpSession session, @RequestBody EditPageForm form) {

		try {
			checkPermissions(session);
			pageService.updatePage(form);

			return new JsonResponse("ok", "");
		} catch (RuntimeException e) {
			return new JsonResponse("error", e.getMessage());
		}
	}

	@RequestMapping("/page/remove/{id}")
	@ResponseBody
	public JsonResponse pageRemove(HttpSession session, @PathVariable long id) {

		try {
			checkPermissions(session);
			pageService.removePage(id);
			return new JsonResponse("ok", "");
		} catch (RuntimeException e) {
			return new JsonResponse("error", e.getMessage());
		}
	}

	@RequestMapping("/user/updateToAdmin/{id}")
	@ResponseBody
	public JsonResponse updateAsAdmin(HttpSession session, @PathVariable long id) {

		try {
			checkPermissions(session);

			userService.changeRole(id, UserRole.ADMIN);

			return new JsonResponse("ok", "");
		} catch (RuntimeException e) {
			return new JsonResponse("error", e.getMessage());
		}
	}

	@RequestMapping("/user/updateToClient/{id}")
	@ResponseBody
	public JsonResponse updateAsClient(HttpSession session, @PathVariable long id) {

		try {
			checkPermissions(session);

			userService.changeRole(id, UserRole.CLIENT);

			return new JsonResponse("ok", "");
		} catch (RuntimeException e) {
			return new JsonResponse("error", e.getMessage());
		}
	}

	@RequestMapping("/user/updateCSP")
	@ResponseBody
	public JsonResponse updateAsCSP(HttpSession session, @RequestBody UpdateCSPForm form) {

		try {
			checkPermissions(session);

			System.out.println(form.isCsp());
			userService.updatePermission(form.getUserId(), form.isCsp());

			return new JsonResponse("ok", "");
		} catch (RuntimeException e) {
			return new JsonResponse("error", e.getMessage());
		}
	}

	private void checkPermissions(HttpSession session) {
		if (!loginService.isLoggedIn(session))
			throw new RuntimeException("User not login.");
		if (loginService.getCurrentUser(session).getRole() != UserRole.ADMIN)
			throw new RuntimeException("User haven't permissions.");
	}

}
