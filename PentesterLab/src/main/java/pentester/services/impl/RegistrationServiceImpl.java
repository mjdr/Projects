package pentester.services.impl;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import pentester.models.User;
import pentester.models.UserRole;
import pentester.models.dao.UserDAO;
import pentester.models.form.RegistrationForm;
import pentester.services.RegistrationService;

@Service
public class RegistrationServiceImpl implements RegistrationService {

	@Autowired(required = true)
	private UserDAO userDao;

	@Autowired(required = true)
	private PasswordEncoder encoder;

	@Override
	public void register(RegistrationForm form) {
		checkForm(form);
		userDao.save(toUser(form));
	}

	private User toUser(RegistrationForm form) {
		User user = new User();

		user.setEmail(form.getEmail());
		user.setName(form.getName());
		user.setRole(UserRole.CLIENT);
		user.setPasswordHash(encoder.encode(form.getPassword()));

		return user;
	}

	private void checkForm(RegistrationForm form) {

		if (form.getName() == null)
			throw new RuntimeException("Name not set");
		if (form.getPassword() == null)
			throw new RuntimeException("Password not set");
		if (form.getConfirmPassword() == null)
			throw new RuntimeException("Confirm password not set");
		if (form.getEmail() == null)
			throw new RuntimeException("Email not set");
		if (form.getName().isEmpty())
			throw new RuntimeException("Name not set");
		if (form.getEmail().isEmpty())
			throw new RuntimeException("Email not set");
		if (form.getPassword().isEmpty())
			throw new RuntimeException("Password not set");
		if (form.getConfirmPassword().isEmpty())
			throw new RuntimeException("Confirm password not set");

		if (!isValidEmailAddress(form.getEmail()))
			throw new RuntimeException("Email no valid");

		if (form.getPassword().length() < 6)
			throw new RuntimeException("Password length must be >= 6");

		if (!form.getPassword().equals(form.getConfirmPassword()))
			throw new RuntimeException("Password not same.");

	}

	public boolean isValidEmailAddress(String email) {
		String ePattern = "^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$";
		Pattern p = Pattern.compile(ePattern);
		Matcher m = p.matcher(email);
		return m.matches();
	}

	public void setUserDao(UserDAO userDao) {
		this.userDao = userDao;
	}

	public void setEncoder(PasswordEncoder encoder) {
		this.encoder = encoder;
	}

}
