package pentester.services.impl;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import pentester.domain.UserData;
import pentester.models.User;
import pentester.models.dao.UserDAO;
import pentester.models.form.LoginForm;
import pentester.services.LoginService;

@Service
public class LoginServiceImpl implements LoginService {

	public static final String LOGIN_PARAMETER_NAME = "user_id";

	@Autowired(required = true)
	private PasswordEncoder encoder;

	@Autowired(required = true)
	private UserDAO userDAO;

	private void check(LoginForm form) {
		if (form.getLogin() == null)
			throw new RuntimeException("Login is empty");
		if (form.getPassword() == null)
			throw new RuntimeException("Password is empty");
		if (form.getLogin().isEmpty())
			throw new RuntimeException("Login is empty");
		if (form.getPassword().isEmpty())
			throw new RuntimeException("Password is empty");
	}

	@Override
	public void login(HttpSession session, LoginForm form) {
		check(form);
		User user = userDAO.getByEmail(form.getLogin());
		if (user == null)
			throw new RuntimeException("User not found!.");

		if (!encoder.matches(form.getPassword(), user.getPasswordHash()))
			throw new RuntimeException("Password don't match.");
		session.setAttribute(LOGIN_PARAMETER_NAME, user.getId());

	}

	@Override
	public void logout(HttpSession session) {
		session.setAttribute(LOGIN_PARAMETER_NAME, null);

	}

	@Override
	public UserData getCurrentUser(HttpSession session) {
		if (!isLoggedIn(session))
			throw new RuntimeException("User not loggined");

		long userId = (Long) session.getAttribute(LOGIN_PARAMETER_NAME);

		return new UserData(userDAO.getById(userId));
	}

	@Override
	public boolean isLoggedIn(HttpSession session) {
		return session.getAttribute(LOGIN_PARAMETER_NAME) != null;
	}

	public void setEncoder(PasswordEncoder encoder) {
		this.encoder = encoder;
	}

	public void setUserDAO(UserDAO userDAO) {
		this.userDAO = userDAO;
	}

}
