package pentester.models.dao;

import java.util.List;

import javax.transaction.Transactional;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.hibernate.transform.Transformers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import pentester.models.Page;

@Repository
@Transactional
public class PageDAOImpl implements PageDAO {

	@Autowired
	private SessionFactory factory;

	@Override
	public void update(Page page) {
		Session session = factory.getCurrentSession();
		session.update(page);

	}

	@Override
	public void save(Page page) {
		factory.getCurrentSession().save(page);
	}

	@Override
	public void remove(Page page) {
		factory.getCurrentSession().delete(page);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<Page> getAllPagesWithoutSource() {

		Session session = factory.getCurrentSession();

		Criteria cr = session.createCriteria(Page.class)
				.setProjection(Projections.projectionList().add(Projections.property("id"), "id")
						.add(Projections.property("title"), "title").add(Projections.property("visible"), "visible"))
				.setResultTransformer(Transformers.aliasToBean(Page.class));

		return cr.list();
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<Page> getAllVisiblePagesWithoutSource() {
		Session session = factory.getCurrentSession();

		Criteria cr = session.createCriteria(Page.class).add(Restrictions.eq("visible", true))
				.setProjection(Projections.projectionList().add(Projections.property("id"), "id")
						.add(Projections.property("title"), "title").add(Projections.property("visible"), "visible"))
				.setResultTransformer(Transformers.aliasToBean(Page.class));

		return cr.list();
	}

	@Override
	public Page getPageById(long id) {
		Session session = factory.getCurrentSession();
		return (Page) session.createQuery("from Page where id = :id").setParameter("id", id).uniqueResult();
	}

}
